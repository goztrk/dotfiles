#!/usr/bin/env bash
#
# Bootstrap .dotfiles to determine what and how to install

# ==============================================================
# Definitions {{{
# ==============================================================

NC='\033[0m'
C_BLACK='\033[0;30m'
C_RED='\033[0;31m'
C_GREEN='\033[0;32m'
C_BROWN='\033[0;33m'
C_BLUE='\033[0;34m'

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

# Exit if there is an error
set -e

# Print empty
echo ''

info () {
  printf "\r  [ ${C_BLUE}..${NC} ] $1\n"
}

user () {
  printf "\r  [ ${C_BROWN}??${NC} ] $1\n"
}

success () {
  printf "\r\033[2K  [ ${C_GREEN}OK${NC} ] $1\n"
}

fail () {
  printf "\r\033[2K  [${C_RED}FAIL${NC}] $1\n"
  echo ''
  exit
}

# }}}


# ==============================================================
# Ask for sudo access {{{
# ==============================================================

printf "${C_BROWN}Dotfiles automator${NC}\n"
echo ''
user 'Do you have sudo access?'
select yn in "Yes" "No"
do
  case $yn in
    Yes ) ISSUDO=true; break;;
    No ) ISSUDO=false; break;;
    Exit ) exit;;
  esac
done

# }}}


# ==============================================================
# Package checking {{{
#
# We need to determine if required packages are installed or not
# ==============================================================

declare -a REQUIRED_PACKAGES=("git" "curl" "make" "python3" "python3-dev" "python3-venv")

info 'Checking required packages...'

for pkg in ${REQUIRED_PACKAGES[@]}
do
  if dpkg --get-selections | grep -q "^$pkg[[:space:]]*install$" >/dev/null
  then
    success "$pkg is installed."
  else
    if $ISSUDO
    then
      apt-get install -qq $pkg
    else
      fail "$pkg is not installed"
      exit
    fi
  fi
done

success 'All necessary packages installed'
echo ''

# }}}


# ==============================================================
# Install ZSH {{{
# ==============================================================

info 'Checking if ZSH available...'
if ! command -v zsh &> /dev/null
then
  info 'ZSH not found.'
  if $ISSUDO
  then
    apt-get install -qq zsh
    success 'Installed as sudo'
  else
    info 'Installing as non sudo user'
    ZSH_INSTALL_DIR=$HOME/.services/zsh
    # get ncurses
    mkdir $HOME/tmp; cd $HOME/tmp
    wget https://ftp.gnu.org/pub/gnu/ncurses/ncurses-6.3.tar.gz
    tar -xf ncurses-6.3.tar.gz
    cd ncurses-6.3

    # Set cflags and c++ flags to compile with Position Independent Code enabled which we need for compiling zsh
    export CXXFLAGS=' -fPIC'
    export CFLAGS=' -fPIC'

    ./configure --prefix=$ZSH_INSTALL_DIR --enable-shared
    make
    make install
    cd ..

    # Tell environment where ncurses is
    INSTALL_PATH="$ZSH_INSTALL_DIR"
    export PATH=$INSTALL_PATH/bin:$PATH
    export LD_LIBRARY_PATH=$INSTALL_PATH/lib:$LD_LIBRARY_PATH
    export CFLAGS=-I$INSTALL_PATH/include
    export CPPFLAGS="-I$INSTALL_PATH/include" LDFLAGS="-L$INSTALL_PATH/lib"

    # Zsh
    # Get zsh
    git clone https://github.com/zsh-users/zsh.git

    # Move into root zsh source directory
    cd zsh

    # Produce config.h.in, needed to produce config.status from ./configure
    autoheader

    # Produce the configure file from aclocal.m4 and configure.ac
    autoconf

    # Produce Makefile and config.h via config.status
    ./configure --prefix=$ZSH_INSTALL_DIR --enable-shared

    make
    make install

    cd $DOTFILES_ROOT

    # delete tmp folder
    rm -rf $HOME/tmp
    success 'ZSH Installed'
  fi
fi

# }}}


# ==============================================================
# Oh My ZSH {{{
# ==============================================================

if [ ! -d $HOME/.oh-my-zsh ]
then
  sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
  success 'Installed oh-my-zsh'
fi

# }}}


# ==============================================================
# Install Node Version Manager (nvm) {{{
# ==============================================================

if [ ! -d $HOME/.nvm ]
then
  wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
  source ~/.zshrc
  nvm install --lts
  success 'NodeJS installed'
fi

# }}}


# ==============================================================
# Neovim {{{
# ==============================================================

if ! command -v nvim &> /dev/null
then
  info 'Neovim not found'
  if $ISSUDO
  then
    sudo apt-get install software-properties-common
    sudo add-apt-repository ppa:neovim-ppa/stable
    sudo apt-get update
    sudo apt-get install neovim
    success 'Installed as sudo'
  else
    mkdir -p $HOME/.programs
    wget -q0- https://github.com/neovim/neovim/releases/download/stable/nvim-linux64.tar.gz | tar xvz - -C $HOME/.programs
    success 'Installed nvim as non sudo user'
  fi
fi

# Nvchad installing
if [ ! -f $HOME/.config/nvim/init.lua ]
then
  git clone https://github.com/NvChad/NvChad ~/.config/nvim --depth 1
  # nvim +'hi NormalFloat guibg=#1e222a' +PackerSync
  success "Nvchad installed"
fi

# Install custom config for nvchad
if [ ! -L $HOME/.config/nvim/lua/custom ] && [ ! -e $HOME/.config/nvim/lua/custom ]
then
  ln -s $DOTFILES_ROOT/nvim $HOME/.config/nvim/lua/custom
  success 'Nvchad custom config loaded'
fi

# }}}


# ==============================================================
# Install Dotfiles {{{
# ==============================================================

link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

install_dotfiles

# }}}


# ==============================================================
# TMUX TPM Plugin {{{
# ==============================================================

if [ ! -d $HOME/.tmux/plugins/tpm ]
then
  git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
fi

# }}}
